#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
This experiment was created using PsychoPy2 Experiment Builder (v1.84.2),
    on Sat 14 Jan 15:06:19 2017
If you publish work using this script please cite the PsychoPy publications:
    Peirce, JW (2007) PsychoPy - Psychophysics software in Python.
        Journal of Neuroscience Methods, 162(1-2), 8-13.
    Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy.
        Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008
"""

from __future__ import absolute_import, division
from psychopy import locale_setup, gui, visual, core, data, event, logging, sound
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)
import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions
import sys  # to get file system encoding

# Ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__)).decode(sys.getfilesystemencoding())
os.chdir(_thisDir)

# Store info about the experiment session
expName = u'untitled'  # from the Builder filename that created this script
expInfo = {'participant':'', 'session':'001'}
dlg = gui.DlgFromDict(dictionary=expInfo, title=expName)
if dlg.OK == False:
    core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = _thisDir + os.sep + u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])

# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName, version='',
    extraInfo=expInfo, runtimeInfo=None,
    originPath=None,
    savePickle=True, saveWideText=True,
    dataFileName=filename)
# save a log file for detail verbose info
logFile = logging.LogFile(filename+'.log', level=logging.EXP)
logging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file

endExpNow = False  # flag for 'escape' or other condition => quit the exp

# Start Code - component code to be run before the window creation

# Setup the Window
win = visual.Window(
    size=(1280, 800), fullscr=True, screen=0,
    allowGUI=False, allowStencil=False,
    monitor='testMonitor', color=[0,0,0], colorSpace='rgb',
    blendMode='avg', useFBO=True)
# store frame rate of monitor if we can measure it
expInfo['frameRate'] = win.getActualFrameRate()
if expInfo['frameRate'] != None:
    frameDur = 1.0 / round(expInfo['frameRate'])
else:
    frameDur = 1.0 / 60.0  # could not measure, so guess

# Initialize components for Routine "White_BlackBG"
White_BlackBGClock = core.Clock()
WhiteCrossHair = visual.TextStim(win=win, name='WhiteCrossHair',
    text=u'+',
    font=u'Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color=u'white', colorSpace='rgb', opacity=1,
    depth=0.0);

# Initialize components for Routine "FacePair1"
FacePair1Clock = core.Clock()
Face1a = visual.ImageStim(
    win=win, name='Face1a',
    image=None, mask=None,
    ori=0, pos=(0, 0), size=(0.5, 0.5),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=0.0)
Face1b = visual.ImageStim(
    win=win, name='Face1b',
    image=None, mask=None,
    ori=0, pos=(0, 0), size=(0.5, 0.5),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-1.0)

# Initialize components for Routine "GreenCross"
GreenCrossClock = core.Clock()
GreenCros = visual.TextStim(win=win, name='GreenCros',
    text=u'+',
    font=u'Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color=[-1.000,1.000,-1.000], colorSpace='rgb', opacity=1,
    depth=0.0);
Face2A = visual.ImageStim(
    win=win, name='Face2A',
    image=None, mask=None,
    ori=0, pos=(0, 0), size=(0.5, 0.5),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-1.0)

# Initialize components for Routine "FacePair2"
FacePair2Clock = core.Clock()
Face2a = visual.ImageStim(
    win=win, name='Face2a',
    image=None, mask=None,
    ori=0, pos=(0, 0), size=(0.5, 0.5),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=0.0)
Face2b = visual.ImageStim(
    win=win, name='Face2b',
    image=None, mask=None,
    ori=0, pos=(0, 0), size=(0.5, 0.5),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-1.0)

# Initialize components for Routine "GreenCross"
GreenCrossClock = core.Clock()
GreenCros = visual.TextStim(win=win, name='GreenCros',
    text=u'+',
    font=u'Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color=[-1.000,1.000,-1.000], colorSpace='rgb', opacity=1,
    depth=0.0);
Face2A = visual.ImageStim(
    win=win, name='Face2A',
    image=None, mask=None,
    ori=0, pos=(0, 0), size=(0.5, 0.5),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-1.0)

# Create some handy timers
globalClock = core.Clock()  # to track the time since experiment started
routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 

# ------Prepare to start Routine "White_BlackBG"-------
t = 0
White_BlackBGClock.reset()  # clock
frameN = -1
continueRoutine = True
routineTimer.add(20.000000)
# update component parameters for each repeat
# keep track of which components have finished
White_BlackBGComponents = [WhiteCrossHair]
for thisComponent in White_BlackBGComponents:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "White_BlackBG"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = White_BlackBGClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *WhiteCrossHair* updates
    if t >= 0.0 and WhiteCrossHair.status == NOT_STARTED:
        # keep track of start time/frame for later
        WhiteCrossHair.tStart = t
        WhiteCrossHair.frameNStart = frameN  # exact frame index
        WhiteCrossHair.setAutoDraw(True)
    frameRemains = 0.0 + 20.0- win.monitorFramePeriod * 0.75  # most of one frame period left
    if WhiteCrossHair.status == STARTED and t >= frameRemains:
        WhiteCrossHair.setAutoDraw(False)
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in White_BlackBGComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "White_BlackBG"-------
for thisComponent in White_BlackBGComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)

# ------Prepare to start Routine "FacePair1"-------
t = 0
FacePair1Clock.reset()  # clock
frameN = -1
continueRoutine = True
routineTimer.add(2.750000)
# update component parameters for each repeat
ResponseFacePair1 = event.BuilderKeyResponse()
# keep track of which components have finished
FacePair1Components = [Face1a, Face1b, ResponseFacePair1]
for thisComponent in FacePair1Components:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "FacePair1"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = FacePair1Clock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *Face1a* updates
    if t >= 0.0 and Face1a.status == NOT_STARTED:
        # keep track of start time/frame for later
        Face1a.tStart = t
        Face1a.frameNStart = frameN  # exact frame index
        Face1a.setAutoDraw(True)
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if Face1a.status == STARTED and t >= frameRemains:
        Face1a.setAutoDraw(False)
    
    # *Face1b* updates
    if t >= 0.0 and Face1b.status == NOT_STARTED:
        # keep track of start time/frame for later
        Face1b.tStart = t
        Face1b.frameNStart = frameN  # exact frame index
        Face1b.setAutoDraw(True)
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if Face1b.status == STARTED and t >= frameRemains:
        Face1b.setAutoDraw(False)
    
    # *ResponseFacePair1* updates
    if t >= 0.0 and ResponseFacePair1.status == NOT_STARTED:
        # keep track of start time/frame for later
        ResponseFacePair1.tStart = t
        ResponseFacePair1.frameNStart = frameN  # exact frame index
        ResponseFacePair1.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(ResponseFacePair1.clock.reset)  # t=0 on next screen flip
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if ResponseFacePair1.status == STARTED and t >= frameRemains:
        ResponseFacePair1.status = STOPPED
    if ResponseFacePair1.status == STARTED:
        theseKeys = event.getKeys(keyList=['1', '2'])
        
        # check for quit:
        if "escape" in theseKeys:
            endExpNow = True
        if len(theseKeys) > 0:  # at least one key was pressed
            if ResponseFacePair1.keys == []:  # then this was the first keypress
                ResponseFacePair1.keys = theseKeys[0]  # just the first key pressed
                ResponseFacePair1.rt = ResponseFacePair1.clock.getTime()
                # a response ends the routine
                continueRoutine = False
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in FacePair1Components:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "FacePair1"-------
for thisComponent in FacePair1Components:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
# check responses
if ResponseFacePair1.keys in ['', [], None]:  # No response was made
    ResponseFacePair1.keys=None
thisExp.addData('ResponseFacePair1.keys',ResponseFacePair1.keys)
if ResponseFacePair1.keys != None:  # we had a response
    thisExp.addData('ResponseFacePair1.rt', ResponseFacePair1.rt)
thisExp.nextEntry()

# ------Prepare to start Routine "GreenCross"-------
t = 0
GreenCrossClock.reset()  # clock
frameN = -1
continueRoutine = True
routineTimer.add(2.750000)
# update component parameters for each repeat
# keep track of which components have finished
GreenCrossComponents = [GreenCros, Face2A]
for thisComponent in GreenCrossComponents:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "GreenCross"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = GreenCrossClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *GreenCros* updates
    if t >= 0.0 and GreenCros.status == NOT_STARTED:
        # keep track of start time/frame for later
        GreenCros.tStart = t
        GreenCros.frameNStart = frameN  # exact frame index
        GreenCros.setAutoDraw(True)
    frameRemains = 0.0 + 0.5- win.monitorFramePeriod * 0.75  # most of one frame period left
    if GreenCros.status == STARTED and t >= frameRemains:
        GreenCros.setAutoDraw(False)
    
    # *Face2A* updates
    if t >= 0.0 and Face2A.status == NOT_STARTED:
        # keep track of start time/frame for later
        Face2A.tStart = t
        Face2A.frameNStart = frameN  # exact frame index
        Face2A.setAutoDraw(True)
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if Face2A.status == STARTED and t >= frameRemains:
        Face2A.setAutoDraw(False)
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in GreenCrossComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "GreenCross"-------
for thisComponent in GreenCrossComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)

# ------Prepare to start Routine "FacePair2"-------
t = 0
FacePair2Clock.reset()  # clock
frameN = -1
continueRoutine = True
routineTimer.add(2.750000)
# update component parameters for each repeat
ResponseFacePair2 = event.BuilderKeyResponse()
# keep track of which components have finished
FacePair2Components = [Face2a, Face2b, ResponseFacePair2]
for thisComponent in FacePair2Components:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "FacePair2"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = FacePair2Clock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *Face2a* updates
    if t >= 0.0 and Face2a.status == NOT_STARTED:
        # keep track of start time/frame for later
        Face2a.tStart = t
        Face2a.frameNStart = frameN  # exact frame index
        Face2a.setAutoDraw(True)
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if Face2a.status == STARTED and t >= frameRemains:
        Face2a.setAutoDraw(False)
    
    # *Face2b* updates
    if t >= 0.0 and Face2b.status == NOT_STARTED:
        # keep track of start time/frame for later
        Face2b.tStart = t
        Face2b.frameNStart = frameN  # exact frame index
        Face2b.setAutoDraw(True)
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if Face2b.status == STARTED and t >= frameRemains:
        Face2b.setAutoDraw(False)
    
    # *ResponseFacePair2* updates
    if t >= 0.0 and ResponseFacePair2.status == NOT_STARTED:
        # keep track of start time/frame for later
        ResponseFacePair2.tStart = t
        ResponseFacePair2.frameNStart = frameN  # exact frame index
        ResponseFacePair2.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(ResponseFacePair2.clock.reset)  # t=0 on next screen flip
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if ResponseFacePair2.status == STARTED and t >= frameRemains:
        ResponseFacePair2.status = STOPPED
    if ResponseFacePair2.status == STARTED:
        theseKeys = event.getKeys(keyList=['1', '2'])
        
        # check for quit:
        if "escape" in theseKeys:
            endExpNow = True
        if len(theseKeys) > 0:  # at least one key was pressed
            if ResponseFacePair2.keys == []:  # then this was the first keypress
                ResponseFacePair2.keys = theseKeys[0]  # just the first key pressed
                ResponseFacePair2.rt = ResponseFacePair2.clock.getTime()
                # was this 'correct'?
                if (ResponseFacePair2.keys == str(u'')) or (ResponseFacePair2.keys == u''):
                    ResponseFacePair2.corr = 1
                else:
                    ResponseFacePair2.corr = 0
                # a response ends the routine
                continueRoutine = False
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in FacePair2Components:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "FacePair2"-------
for thisComponent in FacePair2Components:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
# check responses
if ResponseFacePair2.keys in ['', [], None]:  # No response was made
    ResponseFacePair2.keys=None
    # was no response the correct answer?!
    if str(u'').lower() == 'none':
       ResponseFacePair2.corr = 1  # correct non-response
    else:
       ResponseFacePair2.corr = 0  # failed to respond (incorrectly)
# store data for thisExp (ExperimentHandler)
thisExp.addData('ResponseFacePair2.keys',ResponseFacePair2.keys)
thisExp.addData('ResponseFacePair2.corr', ResponseFacePair2.corr)
if ResponseFacePair2.keys != None:  # we had a response
    thisExp.addData('ResponseFacePair2.rt', ResponseFacePair2.rt)
thisExp.nextEntry()

# ------Prepare to start Routine "GreenCross"-------
t = 0
GreenCrossClock.reset()  # clock
frameN = -1
continueRoutine = True
routineTimer.add(2.750000)
# update component parameters for each repeat
# keep track of which components have finished
GreenCrossComponents = [GreenCros, Face2A]
for thisComponent in GreenCrossComponents:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "GreenCross"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = GreenCrossClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *GreenCros* updates
    if t >= 0.0 and GreenCros.status == NOT_STARTED:
        # keep track of start time/frame for later
        GreenCros.tStart = t
        GreenCros.frameNStart = frameN  # exact frame index
        GreenCros.setAutoDraw(True)
    frameRemains = 0.0 + 0.5- win.monitorFramePeriod * 0.75  # most of one frame period left
    if GreenCros.status == STARTED and t >= frameRemains:
        GreenCros.setAutoDraw(False)
    
    # *Face2A* updates
    if t >= 0.0 and Face2A.status == NOT_STARTED:
        # keep track of start time/frame for later
        Face2A.tStart = t
        Face2A.frameNStart = frameN  # exact frame index
        Face2A.setAutoDraw(True)
    frameRemains = 0.0 + 2.75- win.monitorFramePeriod * 0.75  # most of one frame period left
    if Face2A.status == STARTED and t >= frameRemains:
        Face2A.setAutoDraw(False)
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in GreenCrossComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "GreenCross"-------
for thisComponent in GreenCrossComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
# these shouldn't be strictly necessary (should auto-save)
thisExp.saveAsWideText(filename+'.csv')
thisExp.saveAsPickle(filename)
logging.flush()
# make sure everything is closed down
thisExp.abort()  # or data files will save again on exit
win.close()
core.quit()
